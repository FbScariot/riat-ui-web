// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using RIAT.DAL.Entity.Models;

namespace RIAT.DAL.Entity.Data
{
    public partial class RIATContext : DbContext
    {
        public RIATContext()
        {
        }

        public RIATContext(DbContextOptions<RIATContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AlternativaAdl> AlternativaAdls { get; set; }
        public virtual DbSet<AlternativaAtendimento> AlternativaAtendimentos { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Atendimento> Atendimentos { get; set; }
        public virtual DbSet<Doenca> Doencas { get; set; }
        public virtual DbSet<DoencaPaciente> DoencaPacientes { get; set; }
        public virtual DbSet<Endereco> Enderecos { get; set; }
        public virtual DbSet<Especialidade> Especialidades { get; set; }
        public virtual DbSet<Estado> Estados { get; set; }
        public virtual DbSet<GrauInstrucao> GrauInstrucaos { get; set; }
        public virtual DbSet<OneSignalPlayersUser> OneSignalPlayersUsers { get; set; }
        public virtual DbSet<Paciente> Pacientes { get; set; }
        public virtual DbSet<Pai> Pais { get; set; }
        public virtual DbSet<Pessoa> Pessoas { get; set; }
        public virtual DbSet<PessoaTelefone> PessoaTelefones { get; set; }
        public virtual DbSet<Profissional> Profissionals { get; set; }
        public virtual DbSet<ProfissionalEspecialidade> ProfissionalEspecialidades { get; set; }
        public virtual DbSet<Sintoma> Sintomas { get; set; }
        public virtual DbSet<SintomaAtendimento> SintomaAtendimentos { get; set; }
        public virtual DbSet<TipoAtendimento> TipoAtendimentos { get; set; }
        public virtual DbSet<TipoContratacao> TipoContratacaos { get; set; }
        public virtual DbSet<TipoProfissional> TipoProfissionals { get; set; }
        public virtual DbSet<Turno> Turnos { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AlternativaAdl>(entity =>
            {
                entity.ToTable("ALTERNATIVA_ADL", "App");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasColumnName("CODIGO")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Descricao)
                    .IsRequired()
                    .HasColumnName("DESCRICAO")
                    .IsUnicode(false);

                entity.Property(e => e.Nome)
                    .IsRequired()
                    .HasColumnName("NOME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoConceito)
                    .IsRequired()
                    .HasColumnName("TIPO_CONCEITO")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AlternativaAtendimento>(entity =>
            {
                entity.ToTable("ALTERNATIVA_ATENDIMENTO", "App");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Estado)
                    .HasColumnName("ESTADO")
                    .HasColumnType("decimal(3, 2)");

                entity.Property(e => e.IdAlternativaAdl).HasColumnName("ID_ALTERNATIVA_ADL");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.HasOne(d => d.IdAlternativaAdlNavigation)
                    .WithMany(p => p.AlternativaAtendimentos)
                    .HasForeignKey(d => d.IdAlternativaAdl)
                    .HasConstraintName("FK_ALTERNATIVAS_ADL_ATENDIMENTO_ALTERNATIVAS_ADL");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.AlternativaAtendimentos)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ALTERNATIVAS_ADL_ATENDIMENTO_ATENDIMENTO");
            });

            modelBuilder.Entity<AspNetUser>(entity =>
            {
                entity.HasIndex(e => e.NormalizedEmail)
                    .HasName("EmailIndex");

                entity.HasIndex(e => e.NormalizedUserName)
                    .HasName("UserNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedUserName] IS NOT NULL)");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.FirstName).HasMaxLength(256);

                entity.Property(e => e.LastName).HasMaxLength(256);

                entity.Property(e => e.NormalizedEmail).HasMaxLength(256);

                entity.Property(e => e.NormalizedUserName).HasMaxLength(256);

                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<Atendimento>(entity =>
            {
                entity.ToTable("ATENDIMENTO", "App");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AtenDtAgendamento)
                    .HasColumnName("ATEN_DT_AGENDAMENTO")
                    .HasColumnType("datetime");

                entity.Property(e => e.AtenDtAgendamentoFim)
                    .HasColumnName("ATEN_DT_AGENDAMENTO_FIM")
                    .HasColumnType("datetime");

                entity.Property(e => e.AtenDtCancelamento)
                    .HasColumnName("ATEN_DT_CANCELAMENTO")
                    .HasColumnType("date");

                entity.Property(e => e.AtenDtRealizadaFim).HasColumnName("ATEN_DT_REALIZADA_FIM");

                entity.Property(e => e.AtenDtRealizadaInicio)
                    .HasColumnName("ATEN_DT_REALIZADA_INICIO")
                    .HasColumnType("datetime");

                entity.Property(e => e.AtenStAgendamento)
                    .IsRequired()
                    .HasColumnName("ATEN_ST_AGENDAMENTO")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.AtenTxEvolucao)
                    .HasColumnName("ATEN_TX_EVOLUCAO")
                    .IsUnicode(false);

                entity.Property(e => e.AtenTxMotivoCancelamento)
                    .HasColumnName("ATEN_TX_MOTIVO_CANCELAMENTO")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AtenTxObservacoes)
                    .HasColumnName("ATEN_TX_OBSERVACOES")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.ConfParticiPaciente).HasColumnName("CONF_PARTICI_PACIENTE");

                entity.Property(e => e.ConfParticiProfissional).HasColumnName("CONF_PARTICI_PROFISSIONAL");

                entity.Property(e => e.PaciIdPaciente).HasColumnName("PACI_ID_PACIENTE");

                entity.Property(e => e.ProfIdProfissional).HasColumnName("PROF_ID_PROFISSIONAL");

                entity.Property(e => e.TipaIdTipoAtendimento).HasColumnName("TIPA_ID_TIPO_ATENDIMENTO");

                entity.Property(e => e.VideoConferencia)
                    .HasColumnName("VIDEO_CONFERENCIA")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.HasOne(d => d.PaciIdPacienteNavigation)
                    .WithMany(p => p.Atendimentos)
                    .HasForeignKey(d => d.PaciIdPaciente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ATENDIMENTO_PACIENTE");

                entity.HasOne(d => d.ProfIdProfissionalNavigation)
                    .WithMany(p => p.Atendimentos)
                    .HasForeignKey(d => d.ProfIdProfissional)
                    .HasConstraintName("FK_ATENDIMENTO_PROFISSIONAL");

                entity.HasOne(d => d.TipaIdTipoAtendimentoNavigation)
                    .WithMany(p => p.Atendimentos)
                    .HasForeignKey(d => d.TipaIdTipoAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ATEN_TIPO_ATENDIMENTO");
            });

            modelBuilder.Entity<Doenca>(entity =>
            {
                entity.ToTable("DOENCA", "App");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DoenCodDoenca)
                    .IsRequired()
                    .HasColumnName("DOEN_COD_DOENCA")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DoenNmHipotese)
                    .IsRequired()
                    .HasColumnName("DOEN_NM_HIPOTESE")
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DoencaPaciente>(entity =>
            {
                entity.ToTable("DOENCA_PACIENTE", "App");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DoenIdDoenca).HasColumnName("DOEN_ID_DOENCA");

                entity.Property(e => e.PaciIdPaciente).HasColumnName("PACI_ID_PACIENTE");

                entity.HasOne(d => d.DoenIdDoencaNavigation)
                    .WithMany(p => p.DoencaPacientes)
                    .HasForeignKey(d => d.DoenIdDoenca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DOENCA_PACIENTE_DOENCA");

                entity.HasOne(d => d.PaciIdPacienteNavigation)
                    .WithMany(p => p.DoencaPacientes)
                    .HasForeignKey(d => d.PaciIdPaciente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DOENCA_PACIENTE_PACIENTE");
            });

            modelBuilder.Entity<Endereco>(entity =>
            {
                entity.ToTable("ENDERECO", "App");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EndeCdCep)
                    .HasColumnName("ENDE_CD_CEP")
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.EndeCdNumero)
                    .HasColumnName("ENDE_CD_NUMERO")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.EndeNmBairro)
                    .HasColumnName("ENDE_NM_BAIRRO")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.EndeNmCidade)
                    .HasColumnName("ENDE_NM_CIDADE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EndeNmComplemento)
                    .HasColumnName("ENDE_NM_COMPLEMENTO")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.EndeNmLogradouro)
                    .HasColumnName("ENDE_NM_LOGRADOURO")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EstaIdSigla)
                    .HasColumnName("ESTA_ID_SIGLA")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.EstaIdSiglaNavigation)
                    .WithMany(p => p.Enderecos)
                    .HasForeignKey(d => d.EstaIdSigla)
                    .HasConstraintName("FK_ENDE_ESTADO");
            });

            modelBuilder.Entity<Especialidade>(entity =>
            {
                entity.ToTable("ESPECIALIDADE", "App");

                entity.HasIndex(e => e.EspeCdEspecialidade)
                    .HasName("UQ__ESPECIAL__57182027313141E8")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EspeCdEspecialidade)
                    .IsRequired()
                    .HasColumnName("ESPE_CD_ESPECIALIDADE")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.EspeDsEspecialidade)
                    .IsRequired()
                    .HasColumnName("ESPE_DS_ESPECIALIDADE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.EspeNmEspecialidade)
                    .IsRequired()
                    .HasColumnName("ESPE_NM_ESPECIALIDADE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EspeStAtivo)
                    .IsRequired()
                    .HasColumnName("ESPE_ST_ATIVO")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('A')");
            });

            modelBuilder.Entity<Estado>(entity =>
            {
                entity.HasKey(e => e.EstaIdSigla);

                entity.ToTable("ESTADO", "App");

                entity.Property(e => e.EstaIdSigla)
                    .HasColumnName("ESTA_ID_SIGLA")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EstaNmEstado)
                    .HasColumnName("ESTA_NM_ESTADO")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.PaisIdPais).HasColumnName("PAIS_ID_PAIS");

                entity.HasOne(d => d.PaisIdPaisNavigation)
                    .WithMany(p => p.Estados)
                    .HasForeignKey(d => d.PaisIdPais)
                    .HasConstraintName("FK_ESTADO_PAIS");
            });

            modelBuilder.Entity<GrauInstrucao>(entity =>
            {
                entity.ToTable("GRAU_INSTRUCAO", "App");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.GrinNmGrauInstrucao)
                    .IsRequired()
                    .HasColumnName("GRIN_NM_GRAU_INSTRUCAO")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OneSignalPlayersUser>(entity =>
            {
                entity.Property(e => e.PlayerId)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(450);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.OneSignalPlayersUsers)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OneSignalPlayersUsers_AspNetUsers");
            });

            modelBuilder.Entity<Paciente>(entity =>
            {
                entity.HasKey(e => e.IdPessoa);

                entity.ToTable("PACIENTE", "App");

                entity.Property(e => e.IdPessoa)
                    .HasColumnName("ID_PESSOA")
                    .ValueGeneratedNever();

                entity.Property(e => e.GrinIdGrauInstrucao).HasColumnName("GRIN_ID_GRAU_INSTRUCAO");

                entity.Property(e => e.PaciContatoReferencia)
                    .HasColumnName("PACI_CONTATO_REFERENCIA")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PaciDtAtivacao)
                    .HasColumnName("PACI_DT_ATIVACAO")
                    .HasColumnType("date");

                entity.Property(e => e.PaciDtDesativacao)
                    .HasColumnName("PACI_DT_DESATIVACAO")
                    .HasColumnType("date");

                entity.Property(e => e.PaciMotivoConsulta)
                    .HasColumnName("PACI_MOTIVO_CONSULTA")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PaciNmMae)
                    .HasColumnName("PACI_NM_MAE")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.PaciNmPai)
                    .HasColumnName("PACI_NM_PAI")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.PaciNmProfissao)
                    .HasColumnName("PACI_NM_PROFISSAO")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PaciNrDocumento)
                    .HasColumnName("PACI_NR_DOCUMENTO")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PaciStAtivo)
                    .IsRequired()
                    .HasColumnName("PACI_ST_ATIVO")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PaciStEstadoCivil).HasColumnName("PACI_ST_ESTADO_CIVIL");

                entity.Property(e => e.PaciTipoDocumento).HasColumnName("PACI_TIPO_DOCUMENTO");

                entity.Property(e => e.PaciTpContratacao).HasColumnName("PACI_TP_CONTRATACAO");

                entity.Property(e => e.PaciTxEncaminhadoPor)
                    .HasColumnName("PACI_TX_ENCAMINHADO_POR")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ProfIdProfissionalResponsavel).HasColumnName("PROF_ID_PROFISSIONAL_RESPONSAVEL");

                entity.HasOne(d => d.GrinIdGrauInstrucaoNavigation)
                    .WithMany(p => p.Pacientes)
                    .HasForeignKey(d => d.GrinIdGrauInstrucao)
                    .HasConstraintName("FK_PACI_GRAU_INSTRUCAO");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithOne(p => p.Paciente)
                    .HasForeignKey<Paciente>(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PACI_PESSOA");

                entity.HasOne(d => d.PaciTpContratacaoNavigation)
                    .WithMany(p => p.Pacientes)
                    .HasForeignKey(d => d.PaciTpContratacao)
                    .HasConstraintName("FK_PACIENTE_TIPO_CONTRATACAO");

                entity.HasOne(d => d.ProfIdProfissionalResponsavelNavigation)
                    .WithMany(p => p.Pacientes)
                    .HasForeignKey(d => d.ProfIdProfissionalResponsavel)
                    .HasConstraintName("FK_PACIENTE_PROFISSIONAL");
            });

            modelBuilder.Entity<Pai>(entity =>
            {
                entity.HasKey(e => e.PaisIdPais);

                entity.ToTable("PAIS", "App");

                entity.Property(e => e.PaisIdPais).HasColumnName("PAIS_ID_PAIS");

                entity.Property(e => e.PaisNmPais)
                    .IsRequired()
                    .HasColumnName("PAIS_NM_PAIS")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Pessoa>(entity =>
            {
                entity.ToTable("PESSOA", "App");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AspuIdAspnetuser)
                    .IsRequired()
                    .HasColumnName("ASPU_ID_ASPNETUSER")
                    .HasMaxLength(450);

                entity.Property(e => e.CdCpf)
                    .HasColumnName("CD_CPF")
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.CdCpfResponsavel)
                    .HasColumnName("CD_CPF_RESPONSAVEL")
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.CdSexo)
                    .HasColumnName("CD_SEXO")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DtNascimento)
                    .HasColumnName("DT_NASCIMENTO")
                    .HasColumnType("date");

                entity.Property(e => e.EndeIdEndereco).HasColumnName("ENDE_ID_ENDERECO");

                entity.Property(e => e.LinkSelfieResponsavel)
                    .HasColumnName("LINK_SELFIE_RESPONSAVEL")
                    .HasMaxLength(450);

                entity.Property(e => e.MenorDeIdade)
                    .HasColumnName("MENOR_DE_IDADE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NomeResponsavel)
                    .HasColumnName("NOME_RESPONSAVEL")
                    .HasMaxLength(450);

                entity.HasOne(d => d.AspuIdAspnetuserNavigation)
                    .WithMany(p => p.Pessoas)
                    .HasForeignKey(d => d.AspuIdAspnetuser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PESSOA_AspNetUsers");

                entity.HasOne(d => d.EndeIdEnderecoNavigation)
                    .WithMany(p => p.Pessoas)
                    .HasForeignKey(d => d.EndeIdEndereco)
                    .HasConstraintName("FK_PESS_ENDERECO");
            });

            modelBuilder.Entity<PessoaTelefone>(entity =>
            {
                entity.ToTable("PESSOA_TELEFONE", "App");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PateCdDdd)
                    .HasColumnName("PATE_CD_DDD")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.PateCdDdi)
                    .HasColumnName("PATE_CD_DDI")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.PateNrTelefone)
                    .HasColumnName("PATE_NR_TELEFONE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PateStTipoTelefone)
                    .HasColumnName("PATE_ST_TIPO_TELEFONE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PessIdPessoa).HasColumnName("PESS_ID_PESSOA");

                entity.HasOne(d => d.PessIdPessoaNavigation)
                    .WithMany(p => p.PessoaTelefones)
                    .HasForeignKey(d => d.PessIdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PATE_PESSOA");
            });

            modelBuilder.Entity<Profissional>(entity =>
            {
                entity.HasKey(e => e.IdPessoa);

                entity.ToTable("PROFISSIONAL", "App");

                entity.Property(e => e.IdPessoa)
                    .HasColumnName("ID_PESSOA")
                    .ValueGeneratedNever();

                entity.Property(e => e.ProfCdEPsi)
                    .HasColumnName("PROF_CD_E_PSI")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.ProfDtAtivacao)
                    .HasColumnName("PROF_DT_ATIVACAO")
                    .HasColumnType("date");

                entity.Property(e => e.ProfDtDesativacao)
                    .HasColumnName("PROF_DT_DESATIVACAO")
                    .HasColumnType("date");

                entity.Property(e => e.ProfNrCrp)
                    .HasColumnName("PROF_NR_CRP")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.ProfStAtivo)
                    .IsRequired()
                    .HasColumnName("PROF_ST_ATIVO")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ProfTxMiniCurriculoInterno)
                    .HasColumnName("PROF_TX_MINI_CURRICULO_INTERNO")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ProfTxMiniCurriculoPublico)
                    .HasColumnName("PROF_TX_MINI_CURRICULO_PUBLICO")
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.TiprIdTipoProfissional).HasColumnName("TIPR_ID_TIPO_PROFISSIONAL");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithOne(p => p.Profissional)
                    .HasForeignKey<Profissional>(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PROFISSIONAL_PESSOA");

                entity.HasOne(d => d.TiprIdTipoProfissionalNavigation)
                    .WithMany(p => p.Profissionals)
                    .HasForeignKey(d => d.TiprIdTipoProfissional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PROFISSIONAL_TIPO_PROFISSIONAL1");
            });

            modelBuilder.Entity<ProfissionalEspecialidade>(entity =>
            {
                entity.ToTable("PROFISSIONAL_ESPECIALIDADE", "App");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EspeIdEspecialidade).HasColumnName("ESPE_ID_ESPECIALIDADE");

                entity.Property(e => e.PresCaminhoCertificacao).HasColumnName("PRES_CAMINHO_CERTIFICACAO");

                entity.Property(e => e.PresDtAtivacao)
                    .HasColumnName("PRES_DT_ATIVACAO")
                    .HasColumnType("date");

                entity.Property(e => e.PresDtDesativacao)
                    .HasColumnName("PRES_DT_DESATIVACAO")
                    .HasColumnType("date");

                entity.Property(e => e.PresStAtivo)
                    .IsRequired()
                    .HasColumnName("PRES_ST_ATIVO")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PresStGrauConhecimento)
                    .IsRequired()
                    .HasColumnName("PRES_ST_GRAU_CONHECIMENTO")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ProfIdProfissional).HasColumnName("PROF_ID_PROFISSIONAL");

                entity.HasOne(d => d.EspeIdEspecialidadeNavigation)
                    .WithMany(p => p.ProfissionalEspecialidades)
                    .HasForeignKey(d => d.EspeIdEspecialidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PRES_ESPECIALIDADE");
            });

            modelBuilder.Entity<Sintoma>(entity =>
            {
                entity.ToTable("SINTOMA", "App");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DoenIdDoenca).HasColumnName("DOEN_ID_DOENCA");

                entity.Property(e => e.SintCodSintoma)
                    .IsRequired()
                    .HasColumnName("SINT_COD_SINTOMA")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.SintDsSintoma)
                    .IsRequired()
                    .HasColumnName("SINT_DS_SINTOMA")
                    .IsUnicode(false);

                entity.Property(e => e.SintNomeSintoma)
                    .IsRequired()
                    .HasColumnName("SINT_NOME_SINTOMA")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.DoenIdDoencaNavigation)
                    .WithMany(p => p.Sintomas)
                    .HasForeignKey(d => d.DoenIdDoenca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SINT_DOENCA");
            });

            modelBuilder.Entity<SintomaAtendimento>(entity =>
            {
                entity.ToTable("SINTOMA_ATENDIMENTO", "App");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DopaIdDoencaPaciente).HasColumnName("DOPA_ID_DOENCA_PACIENTE");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.SidhCdPeso).HasColumnName("SIDH_CD_PESO");

                entity.Property(e => e.SintIdSintoma).HasColumnName("SINT_ID_SINTOMA");

                entity.HasOne(d => d.DopaIdDoencaPacienteNavigation)
                    .WithMany(p => p.SintomaAtendimentos)
                    .HasForeignKey(d => d.DopaIdDoencaPaciente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SIDH_DOENCA_HISTORIA_CLINICA");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.SintomaAtendimentos)
                    .HasForeignKey(d => d.IdAtendimento)
                    .HasConstraintName("FK_SINTOMA_DOENCA_HISTORIACLINICA_ATENDIMENTO");

                entity.HasOne(d => d.SintIdSintomaNavigation)
                    .WithMany(p => p.SintomaAtendimentos)
                    .HasForeignKey(d => d.SintIdSintoma)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SIDH_SINTOMA");
            });

            modelBuilder.Entity<TipoAtendimento>(entity =>
            {
                entity.ToTable("TIPO_ATENDIMENTO", "App");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.TipaNmTipoAtendimento)
                    .HasColumnName("TIPA_NM_TIPO_ATENDIMENTO")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TipoContratacao>(entity =>
            {
                entity.ToTable("TIPO_CONTRATACAO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.TiprDsTipoContratacao)
                    .HasColumnName("TIPR_DS_TIPO_CONTRATACAO")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TiprNmTipoContratacao)
                    .HasColumnName("TIPR_NM_TIPO_CONTRATACAO")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TipoProfissional>(entity =>
            {
                entity.ToTable("TIPO_PROFISSIONAL", "App");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.TiprDsTipoProfissional)
                    .HasColumnName("TIPR_DS_TIPO_PROFISSIONAL")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TiprNmTipoProfissional)
                    .HasColumnName("TIPR_NM_TIPO_PROFISSIONAL")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Turno>(entity =>
            {
                entity.ToTable("TURNO", "App");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.TurnNmTurno)
                    .HasColumnName("TURN_NM_TURNO")
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}